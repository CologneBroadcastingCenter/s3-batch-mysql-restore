---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  SecretName:
    Type: String
    Description: Name of SecretsManager secret

  PipelineName:
    Type: String
    Default: s3-batch-sql-restore
    Description: Unique pipeline name, used as prefix

  GitSourceRepo:
    Type: String
    Default: s3-batch-sql-restore
    Description: GitHub source repository

  GitBranch:
    Type: String
    Default: master
    Description: CodeCommit or GitHub git repository branch - change triggers a new build

  GitHubUser:
    Type: String
    Default: mgla
    Description: GitHub username or organization. Your copy of the repository.

  MaxTaggedContainerImagesToRetain:
    Type: Number
    Description: The number of tagged container images to retain before expiring
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: Value must be between 1 and 100
    Default: 20

  DaysToRetainUntaggedContainerImages:
    Type: Number
    Description: The number days to retain untagged container images before expiring
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: Value must be between 1 and 100
    Default: 7

Resources:
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${PipelineName}-codebuild'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Resource: '*'
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - ecr:GetAuthorizationToken
          - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
            Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:GetObjectVersion
          - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrDockerRepository}
            Effect: Allow
            Action:
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability
            - ecr:PutImage
            - ecr:InitiateLayerUpload
            - ecr:UploadLayerPart
            - ecr:CompleteLayerUpload


  # By default, the build specification is defined in this template, but you can also add buildspec.yml
  # files in your repos to allow for customization.
  # See:
  # https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-codebuild-project-source.html
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${PipelineName}'
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: 'aws/codebuild/docker:18.09.0'
        EnvironmentVariables:
        - Name: REPOSITORY_URI
          Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
        - Name: REPOSITORY_BRANCH
          Value: !Ref GitBranch
        - Name: REPOSITORY_NAME
          Value: !Sub '${GitHubUser}/${GitSourceRepo}'
      ServiceRole: !Ref CodeBuildServiceRole

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub 'artifacts-${PipelineName}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  # This CodePipeline is used for GitHub based repos. It triggers on a commit to the Git branch passed,
  # builds the Docker image and then deploys the container in the Fargate Cluster. CodePipeline can support N stages.
  # For example, you may want to add a stage to test your build and/or container.
  CodePipelineGitHub:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${PipelineName}'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      Stages:
      - Name: Source
        Actions:
        - Name: Source
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: 1
            Provider: GitHub
          Configuration:
            Owner: !Ref GitHubUser
            Repo: !Ref GitSourceRepo
            Branch: !Ref GitBranch
            OAuthToken: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:oauth}}"
            PollForSourceChanges: false
          OutputArtifacts:
          - Name: App
          RunOrder: 1
      - Name: Build
        Actions:
        - Name: Build
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: 1
            Provider: CodeBuild
          Configuration:
            ProjectName: !Ref CodeBuildProject
          InputArtifacts:
          - Name: App
          OutputArtifacts:
          - Name: BuildOutput
          RunOrder: 1

  GithubWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Name: !Sub '${PipelineName}-Webhook-Github'
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Sub "{{resolve:secretsmanager:${SecretName}:SecretString:secret}}"
      Filters:
      - JsonPath: "$.ref"
        MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref CodePipelineGitHub
      TargetAction: Source
      TargetPipelineVersion: !GetAtt CodePipelineGitHub.Version
      RegisterWithThirdParty: 'true'

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${PipelineName}-codepipeline'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: codepipeline-access
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Resource: "*"
            Effect: Allow
            Action:
            - codebuild:StartBuild
            - codebuild:BatchGetBuilds
            - iam:PassRole
          - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
            Effect: Allow
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning

  EcrDockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'github/${GitHubUser}/${GitSourceRepo}'
      LifecyclePolicy:
        LifecyclePolicyText: !Sub
        - |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Only keep untagged images for ${DaysToRetainUntaggedContainerImages} days",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": ${DaysToRetainUntaggedContainerImages}
                },
                "action": { "type": "expire" }
              },
              {
                "rulePriority": 2,
                "description": "Keep only ${MaxTaggedContainerImagesToRetain} tagged images, expire all others",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPrefixList": ["master"],
                  "countType": "imageCountMoreThan",
                  "countNumber": ${MaxTaggedContainerImagesToRetain}
                },
                "action": { "type": "expire" }
              }
            ]
          }
        - DaysToRetainUntaggedContainerImages: !Ref DaysToRetainUntaggedContainerImages
          MaxTaggedContainerImagesToRetain: !Ref MaxTaggedContainerImagesToRetain
